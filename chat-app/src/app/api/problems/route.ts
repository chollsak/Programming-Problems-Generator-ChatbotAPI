// app/api/problems/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { OpenAI } from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY, 
});

/**
 * Handles POST requests to generate a programming problem using OpenAI.
 */
export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { language, difficulty, topics, isAnotherProblem, programLanguage } = body;

    if (!topics || topics.length === 0) {
      return NextResponse.json({ error: 'Please select at least one topic.' }, { status: 400 });
    }

    const topicsString = topics.join(', ');
    const langCode = programLanguage.toLowerCase() === 'c' ? 'c' : 'python';
    let prompt = '';

    // Define the mandatory output format explicitly including the programming language
    const outputFormat = `
      You must follow this exact output structure for easy parsing:
      Problem Name: [The name of the problem]
      Description: [Detailed problem statement, 3 test cases (Input/Output)]
      Example Source Code:
      \`\`\`${langCode}
      [The complete source code in ${programLanguage}]
      \`\`\`
      Do not include any text before 'Problem Name:' or after the final code fence.
    `.trim();

    if (language === 'th') {
      prompt = `
        สร้างโจทย์ Programming ระดับมหาลัย ระดับ ${difficulty} ในหัวข้อ ${topicsString}
        และเขียนโค้ดตัวอย่างด้วยภาษา ${programLanguage} ในภาษาไทย
        คำขอ: ${isAnotherProblem ? 'ขอโจทย์ใหม่เพิ่มเติม' : 'ขอโจทย์'}
        รูปแบบที่ต้องการ: ${outputFormat}
      `.trim();
    } else {
      prompt = `
        Generate a new ${difficulty} level university Programming problem related to the topics: ${topicsString}.
        Provide the example source code using the ${programLanguage} language.
        Request Type: ${isAnotherProblem ? 'Give me another new problem' : 'Give me the problem'}
        Required Output Format: ${outputFormat}
      `.trim();
    }

    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini', // Using a powerful model to better adhere to the format
      messages: [
        { 
          role: 'system', 
          content: 'You are a helpful programming tutor. You MUST strictly follow the requested output format and language.' 
        },
        { 
          role: 'user', 
          content: prompt 
        }
      ],
    });

    const content = response.choices[0].message?.content ?? 'No response was generated by the AI.';
    
    if (content.toLowerCase().includes('error') || content.includes('No response')) {
        return NextResponse.json({ error: content }, { status: 500 });
    }

    return NextResponse.json({ response: content });
    
  } catch (error) {
    console.error('API Error generating problem:', error); 
    return NextResponse.json(
      { error: 'Failed to generate problem due to an internal server error. Check console logs for details.' }, 
      { status: 500 }
    );
  }
}